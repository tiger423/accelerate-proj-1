# -*- coding: utf-8 -*-
"""Accelerate_OPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14wnxMvD9zsiBQo2FtTpxn6w2cpXCcb-7

# Running OPT up to 30B using `accelerate`

This notebook shows how to leverage the dispatching utility in colab, to load even very large checkpoints.

This should handle up to 11B in Colab Free, and 30B in colab Pro.
"""



"""This downloads the checkpoint. Several checkpoints are available:

- [facebook/opt-125m](https://huggingface.co/facebook/opt-125m)
- [facebook/opt-350m](https://huggingface.co/facebook/opt-350m)
- [facebook/opt-1.3b](https://huggingface.co/facebook/opt-1.3b)
- [facebook/opt-2.7b](https://huggingface.co/facebook/opt-2.7b)
- [facebook/opt-6.7b](https://huggingface.co/facebook/opt-6.7b)
- [facebook/opt-13b](https://huggingface.co/facebook/opt-13b)
- [facebook/opt-30b](https://huggingface.co/facebook/opt-30b)

It downloads it to cache and we save the link to be re-used afterwards,

We then instantiate the model with an automatic model map, that will be created according to the current system's configuration.
"""

from transformers import AutoModelForCausalLM, AutoTokenizer

import time

hf_token = "xxxxxxxxxxDcD"
my_model = 'facebook/opt-66b'

#my_model = 'meta-llama/Llama-2-7b-hf'

t0 = time.time()
# ! mkdir offload_folder

print(f"model = {my_model} ")
model = AutoModelForCausalLM.from_pretrained(
    my_model, 
    device_map="auto", 
    offload_folder='./swap', 
    token=hf_token 
    )
    
print(f"model size= {model.get_memory_footprint()/1000000000} GB")
"""Finally, we create a prompt to generate from and we generate a text from it."""

tokenizer = AutoTokenizer.from_pretrained(my_model, use_fast=False, token=hf_token)
inputs = tokenizer("Hugging Face is pushing the convention that a unicorn with two horns becomes a llama.", return_tensors="pt")

output = model.generate(inputs["input_ids"].to(0), min_length=30, max_length=30, do_sample=True)
print(f"used time: {(time.time()-t0) } seconds")
    
print(tokenizer.decode(output[0].tolist()))

print(model.hf_device_map)

